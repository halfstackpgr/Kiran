import typing
import msgspec


from .media import PhotoSize, Animation
from .messages import MessageEntity

from ..core.enums import PollType


class Location(msgspec.Struct):
    latitude: float
    """
    Latitude as defined by sender.
    """
    longitude: float
    """
    Longitude as defined by sender.
    """
    horizontal_accuracy: typing.Optional[float]
    """
    The radius of uncertainty for the location, measured in meters; 0-1500.
    """
    live_period: typing.Optional[int]
    """
    Period in seconds for which the location can be updated, should be between 60 and 86400.
    """
    heading: typing.Optional[int]
    """
    Direction in which user is moving, in degrees; must be between 1 and 360 if specified.
    """
    proximity_alert_radius: typing.Optional[int]
    """
    The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
    """


class Contact(msgspec.Struct):
    """
    This object represents a phone contact.
    """

    phone_number: str
    """
    Contact's phone number
    """
    first_name: str
    """
    Contact's first name
    """
    last_name: typing.Optional[str]
    """
    Contact's last name
    """
    user_id: typing.Optional[int]
    """
    Contact's user identifier in Telegram
    """
    vcard: typing.Optional[str]
    """
    Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)
    """


class Dice(msgspec.Struct):
    emoji: str
    """
    Emoji on which the dice throw animation is based
    """
    value: int
    """
    Value of the dice, 1-6 for `üé≤`, `üéØ` and `üé≥` base emoji, 1-5 for `üèÄ` and `‚öΩ` base emoji, 1-64 for `üé∞` base emoji
    """


class Game(msgspec.Struct):
    """
    This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
    """

    title: str
    """
    Title of the game
    """
    description: str
    """
    Description of the game
    """
    photo: typing.List[PhotoSize]
    """
    Photo that will be displayed in the game message in chats.
    """
    text: typing.Optional[str]
    """
    Brief description of the game or high scores included in the game message. Can be automatically generated by Web API.
    """
    text_entities: typing.Optional[typing.List[MessageEntity]]
    """
    Special entities that appear in text, such as usernames, URLs, bot commands, etc.
    """
    animation: typing.Optional[Animation]
    """
    Animation that will be displayed in the game message in chats. Upload via BotFather
    """


class PollOptions(msgspec.Struct):
    """
    Information about one answer option in a poll.
    """

    text: str
    """
    Option text, 1-100 characters
    """
    text_entities: typing.Optional[typing.List[MessageEntity]]
    """
    Special entities that appear in the option text. Currently, only custom emoji entities are allowed in poll option texts.
    """
    voter_count: int
    """
    Number of users that voted for this option
    """


class Poll(msgspec.Struct):
    """
    This object contains information about a poll.
    """

    id: str
    """
    Unique poll identifier
    """
    question: str
    """
    Poll question, 1-300 characters
    """
    question_entities: typing.Optional[typing.List[MessageEntity]]
    """
    Special entities that appear in the question. Currently, only custom emoji entities are allowed in poll questions
    """
    options: typing.List[PollOptions]
    """
    List of poll options
    """
    total_voter_count: int
    """
    Total number of users that voted in the poll
    """
    is_closed: bool
    """
    True, if the poll is closed
    """
    is_anonymous: bool
    """
    True, if the poll is anonymous
    """
    type: typing.Optional[PollType]
    """
    Poll type, currently can be `regular` or `quiz`
    """
    allows_multiple_answers: bool
    """
    True, if the poll allows multiple answers
    """
    correct_option_id: typing.Optional[int]
    """
    0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
    """
    explanation: typing.Optional[str]
    """
    Optional. The text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
    """
    explanation_entities: typing.Optional[typing.List[MessageEntity]]
    """
    Optional. Special entities that appear in the poll explanation, which can be specified instead of *explanation*.
    """
    open_period: typing.Optional[int]
    """
    Optional. Amount of time in seconds the poll will be active after creation
    """
    close_date: typing.Optional[int]
    """
    Optional. Point in time (Unix timestamp) when the poll will be automatically closed
    """


class Venue(msgspec.Struct):
    """
    This object represents a venue.
    """

    location: Location
    """
    Venue location
    """
    title: str
    """
    Name of the venue
    """
    address: str
    """
    Address of the venue
    """
    foursquare_id: typing.Optional[str]
    """
    Optional. Foursquare identifier of the venue
    """
    foursquare_type: typing.Optional[str]
    """
    Optional. Foursquare type of the venue. (For example, ‚Äúarts_entertainment/default‚Äù, ‚Äúarts_entertainment/aquarium‚Äù or ‚Äúfood/ice cream‚Äù.) 
    """
    google_place_id: typing.Optional[str]
    """
    Optional. Google Places identifier of the venue
    """
    google_place_type: typing.Optional[str]
    """
    Optional. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
    """


class MessageAutoDeleteTimerChanged(msgspec.Struct):
    """
    This object represents a service message about a change in auto-delete timer settings.
    """

    message_auto_delete_time: int
    """
    New auto-delete time for messages in the chat
    """
